================================================================================
                     DOCUMENTAÇÃO COMPLETA DA API MERCOCAMP
                              Backend v3.1.0
================================================================================

ÍNDICE:
1. INFORMAÇÕES GERAIS
2. AUTENTICAÇÃO E SEGURANÇA
3. ESTRUTURA DE RESPOSTA
4. ENDPOINTS DE SISTEMA
5. ENDPOINTS DE AGENDAMENTO
6. ENDPOINTS DE PRODUTOS
7. CÓDIGOS DE STATUS HTTP
8. VALIDAÇÕES E REGRAS
9. EXEMPLOS PRÁTICOS
10. TROUBLESHOOTING

================================================================================
1. INFORMAÇÕES GERAIS
================================================================================

BASE URL: https://seu-app.railway.app
VERSÃO: 3.1.0
FORMATO: JSON
ENCODING: UTF-8
MÉTODO HTTP: GET, POST, PUT, DELETE
CONTENT-TYPE: application/json

CARACTERÍSTICAS:
- API RESTful completa
- Validações robustas de dados
- Histórico automático de alterações
- Rate limiting (100 requests/15min)
- Health check integrado
- Logs detalhados
- Pool de conexões otimizado

================================================================================
2. AUTENTICAÇÃO E SEGURANÇA
================================================================================

HEADERS OBRIGATÓRIOS:
Content-Type: application/json

RATE LIMITING:
- Máximo: 100 requests por IP a cada 15 minutos
- Resposta quando excedido: HTTP 429

VALIDAÇÕES:
- Sanitização automática de dados
- Proteção contra SQL Injection
- Validação de tipos de dados
- Campos obrigatórios verificados

================================================================================
3. ESTRUTURA DE RESPOSTA
================================================================================

RESPOSTA DE SUCESSO:
{
  "success": true,
  "data": [...],
  "message": "Operação realizada com sucesso"
}

RESPOSTA DE ERRO:
{
  "success": false,
  "message": "Descrição do erro",
  "errors": ["Lista de erros específicos"]
}

RESPOSTA DE LISTAGEM:
{
  "success": true,
  "data": [...],
  "total": 25,
  "filters": {...}
}

================================================================================
4. ENDPOINTS DE SISTEMA
================================================================================

4.1 HEALTH CHECK
----------------
URL: GET /health
Descrição: Verifica se a API está funcionando
Parâmetros: Nenhum

RESPOSTA:
{
  "success": true,
  "message": "API está funcionando",
  "timestamp": "2024-01-15T10:30:00.000Z",
  "version": "3.1.0"
}

4.2 DOCUMENTAÇÃO
----------------
URL: GET /
Descrição: Retorna informações sobre todos os endpoints
Parâmetros: Nenhum

RESPOSTA:
{
  "success": true,
  "message": "API CRUD Mercocamp v3.1.0",
  "endpoints": {...},
  "documentation": {...}
}

4.3 DEBUG (Apenas desenvolvimento)
----------------------------------
URL: GET /debug
Descrição: Informações técnicas do sistema
Parâmetros: Nenhum
Nota: Disponível apenas em NODE_ENV=development

================================================================================
5. ENDPOINTS DE AGENDAMENTO
================================================================================

5.1 LISTAR AGENDAMENTOS
------------------------
URL: GET /table/agendamento
Descrição: Lista todos os agendamentos com filtros opcionais

PARÂMETROS DE QUERY (opcionais):
- limit: Número máximo de registros (default: 100, máximo: 1000)
- offset: Paginação (default: 0)
- status: Filtrar por status (ATIVO, INATIVO, CONCLUIDO, PENDENTE, CANCELADO)
- data_inicio: Data inicial (formato: YYYY-MM-DD)
- data_fim: Data final (formato: YYYY-MM-DD)
- cli: Código do cliente (número inteiro)

EXEMPLO DE REQUEST:
GET /table/agendamento?status=ATIVO&limit=50&offset=0

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "data": [
    {
      "ID": "AGE001",
      "NUM": 1,
      "CHNFE": 12345678901234567890123456789012345678901234,
      "CLI": 1001,
      "VOL": 5,
      "DATA": "2024-01-15",
      "STATUS": "ATIVO",
      "HIST": {...}
    }
  ],
  "total": 1,
  "filters": {"status": "ATIVO", "limit": 50, "offset": 0}
}

5.2 BUSCAR AGENDAMENTO POR ID
-----------------------------
URL: GET /table/agendamento/{ID}
Descrição: Busca um agendamento específico

PARÂMETROS:
- ID: Identificador único do agendamento (máximo 50 caracteres)

EXEMPLO DE REQUEST:
GET /table/agendamento/AGE001

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "data": {
    "ID": "AGE001",
    "NUM": 1,
    "CHNFE": 12345678901234567890123456789012345678901234,
    "CLI": 1001,
    "VOL": 5,
    "DATA": "2024-01-15",
    "STATUS": "ATIVO",
    "HIST": {
      "data": "2024-01-15 10:30:00",
      "usuario": "admin",
      "alteracao": {
        "acao": "CRIACAO",
        "campos_afetados": {...}
      }
    }
  }
}

5.3 CRIAR AGENDAMENTO
---------------------
URL: POST /table/agendamento
Descrição: Cria um novo agendamento

CAMPOS OBRIGATÓRIOS:
- NUM: Número sequencial (tinyint, 0-255)
- CHNFE: Chave NFe (exatamente 44 dígitos)
- CLI: Código do cliente (inteiro positivo)
- VOL: Volume (inteiro positivo)
- DATA: Data do agendamento (formato: YYYY-MM-DD)
- STATUS: Status (ATIVO, INATIVO, CONCLUIDO, PENDENTE, CANCELADO)
- user_id: Usuário responsável (string, para histórico)

CAMPOS OPCIONAIS:
- ID: Se não fornecido, será gerado automaticamente

EXEMPLO DE REQUEST:
POST /table/agendamento
Content-Type: application/json

{
  "ID": "AGE002",
  "NUM": 2,
  "CHNFE": 12345678901234567890123456789012345678901234,
  "CLI": 1002,
  "VOL": 10,
  "DATA": "2024-01-16",
  "STATUS": "ATIVO",
  "user_id": "admin"
}

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "message": "Agendamento criado com sucesso",
  "data": {
    "insertId": 2
  }
}

5.4 ATUALIZAR AGENDAMENTO
--------------------------
URL: PUT /table/agendamento/{ID}
Descrição: Atualiza um agendamento existente

PARÂMETROS:
- ID: Identificador único do agendamento

CAMPOS ATUALIZÁVEIS:
- NUM, CHNFE, CLI, VOL, DATA, STATUS
- user_id: Obrigatório para histórico

EXEMPLO DE REQUEST:
PUT /table/agendamento/AGE002
Content-Type: application/json

{
  "STATUS": "CONCLUIDO",
  "VOL": 12,
  "user_id": "supervisor"
}

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "message": "Agendamento atualizado com sucesso",
  "data": {
    "affectedRows": 1
  }
}

5.5 DELETAR AGENDAMENTO
-----------------------
URL: DELETE /table/agendamento/{ID}
Descrição: Remove um agendamento

PARÂMETROS:
- ID: Identificador único do agendamento

EXEMPLO DE REQUEST:
DELETE /table/agendamento/AGE002

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "message": "Agendamento deletado com sucesso",
  "data": {
    "affectedRows": 1
  }
}

5.6 ENDPOINTS EXTRAS DE AGENDAMENTO
-----------------------------------

ESTRUTURA DA TABELA:
GET /table/agendamento/structure

ESTATÍSTICAS:
GET /table/agendamento/stats

BUSCAR POR CHNFE:
GET /table/agendamento/chnfe/{CHNFE}

BUSCAR POR CLIENTE:
GET /table/agendamento/cliente/{CLI}

================================================================================
6. ENDPOINTS DE PRODUTOS
================================================================================

6.1 LISTAR PRODUTOS
--------------------
URL: GET /table/produtos
Descrição: Lista todos os produtos com filtros opcionais

PARÂMETROS DE QUERY (opcionais):
- limit: Número máximo de registros (default: 100)
- offset: Paginação (default: 0)
- cnpj_int: CNPJ interno (14 dígitos)
- cnpj_forn: CNPJ fornecedor (14 dígitos)
- cod_forn: Código do fornecedor

EXEMPLO DE REQUEST:
GET /table/produtos?cnpj_int=12345678000195&limit=25

EXEMPLO DE RESPOSTA:
{
  "success": true,
  "data": [
    {
      "cod_int": "PROD001",
      "cnpj_int": "12345678000195",
      "cod_forn": "FORN001",
      "cnpj_forn": "98765432000111"
    }
  ],
  "total": 1,
  "filters": {"cnpj_int": "12345678000195", "limit": 25}
}

6.2 BUSCAR PRODUTO POR CÓDIGO
------------------------------
URL: GET /table/produtos/{cod_int}
Descrição: Busca um produto específico

PARÂMETROS:
- cod_int: Código interno do produto

EXEMPLO DE REQUEST:
GET /table/produtos/PROD001

6.3 CRIAR PRODUTO
-----------------
URL: POST /table/produtos
Descrição: Cria um novo produto

CAMPOS OBRIGATÓRIOS:
- cod_int: Código interno (máximo 50 caracteres, único)
- cnpj_int: CNPJ interno (14 dígitos válidos)
- cod_forn: Código fornecedor (máximo 50 caracteres)
- cnpj_forn: CNPJ fornecedor (14 dígitos válidos)

EXEMPLO DE REQUEST:
POST /table/produtos
Content-Type: application/json

{
  "cod_int": "PROD002",
  "cnpj_int": "12345678000195",
  "cod_forn": "FORN002",
  "cnpj_forn": "98765432000111"
}

6.4 ATUALIZAR PRODUTO
----------------------
URL: PUT /table/produtos/{cod_int}
Descrição: Atualiza um produto existente

EXEMPLO DE REQUEST:
PUT /table/produtos/PROD002
Content-Type: application/json

{
  "cnpj_forn": "11111111000111",
  "cod_forn": "FORN003"
}

6.5 DELETAR PRODUTO
-------------------
URL: DELETE /table/produtos/{cod_int}
Descrição: Remove um produto

EXEMPLO DE REQUEST:
DELETE /table/produtos/PROD002

6.6 ENDPOINTS EXTRAS DE PRODUTOS
---------------------------------

ESTRUTURA DA TABELA:
GET /table/produtos/structure

ESTATÍSTICAS:
GET /table/produtos/stats

BUSCAR POR CNPJ INTERNO:
GET /table/produtos/cnpj-interno/{cnpj_int}

BUSCAR POR CNPJ FORNECEDOR:
GET /table/produtos/cnpj-fornecedor/{cnpj_forn}

BUSCAR POR CÓDIGO FORNECEDOR:
GET /table/produtos/codigo-fornecedor/{cod_forn}

PESQUISAR:
GET /table/produtos/search?q=termo_busca

================================================================================
7. CÓDIGOS DE STATUS HTTP
================================================================================

200 OK: Operação realizada com sucesso
201 Created: Recurso criado com sucesso
400 Bad Request: Dados inválidos ou campos obrigatórios faltando
404 Not Found: Recurso não encontrado
429 Too Many Requests: Rate limit excedido
500 Internal Server Error: Erro interno do servidor

EXEMPLOS DE ERRO 400:
{
  "success": false,
  "message": "Dados inválidos",
  "errors": [
    "CHNFE deve conter exatamente 44 dígitos",
    "DATA deve estar no formato YYYY-MM-DD"
  ]
}

EXEMPLOS DE ERRO 404:
{
  "success": false,
  "message": "Agendamento não encontrado"
}

================================================================================
8. VALIDAÇÕES E REGRAS
================================================================================

AGENDAMENTO:
- ID: Máximo 50 caracteres, alfanumérico + _ e -
- NUM: Número inteiro de 0 a 255
- CHNFE: Exatamente 44 dígitos numéricos
- CLI: Número inteiro positivo
- VOL: Número inteiro positivo
- DATA: Formato YYYY-MM-DD, data válida
- STATUS: ATIVO, INATIVO, CONCLUIDO, PENDENTE, CANCELADO
- HIST: JSON válido com estrutura específica

PRODUTOS:
- cod_int: Máximo 50 caracteres, alfanumérico + _ e -, único
- cnpj_int: 14 dígitos, CNPJ válido
- cod_forn: Máximo 50 caracteres, alfanumérico + _ e -
- cnpj_forn: 14 dígitos, CNPJ válido

LIMPEZA AUTOMÁTICA:
- CNPJs: Pontos, barras e hífens são removidos automaticamente
- Strings: Espaços extras são removidos
- Caracteres perigosos são sanitizados

================================================================================
9. EXEMPLOS PRÁTICOS
================================================================================

9.1 CENÁRIO: CRIAR AGENDAMENTO COMPLETO
----------------------------------------

1. Criar agendamento:
POST /table/agendamento
{
  "ID": "AGE20240115001",
  "NUM": 1,
  "CHNFE": 35240114200166000196550010000000011081234567,
  "CLI": 12345,
  "VOL": 50,
  "DATA": "2024-01-20",
  "STATUS": "ATIVO",
  "user_id": "operador01"
}

2. Verificar criação:
GET /table/agendamento/AGE20240115001

3. Atualizar status:
PUT /table/agendamento/AGE20240115001
{
  "STATUS": "CONCLUIDO",
  "user_id": "supervisor"
}

9.2 CENÁRIO: GERENCIAR PRODUTOS
--------------------------------

1. Listar produtos de um fornecedor:
GET /table/produtos/cnpj-fornecedor/12345678000195

2. Criar novo produto:
POST /table/produtos
{
  "cod_int": "NOTEBOOK001",
  "cnpj_int": "98765432000111",
  "cod_forn": "NB2024001",
  "cnpj_forn": "12345678000195"
}

3. Pesquisar produtos:
GET /table/produtos/search?q=NOTEBOOK

9.3 CENÁRIO: CONSULTAS COM FILTROS
-----------------------------------

1. Agendamentos ativos do último mês:
GET /table/agendamento?status=ATIVO&data_inicio=2024-01-01&data_fim=2024-01-31

2. Agendamentos de um cliente específico:
GET /table/agendamento/cliente/12345

3. Produtos paginados:
GET /table/produtos?limit=50&offset=100

================================================================================
10. TROUBLESHOOTING
================================================================================

PROBLEMA: Erro 400 - "CHNFE deve conter exatamente 44 dígitos"
SOLUÇÃO: Verificar se a chave NFe está completa e tem 44 dígitos numéricos

PROBLEMA: Erro 400 - "DATA deve estar no formato YYYY-MM-DD"
SOLUÇÃO: Usar formato correto: "2024-01-15" (com zeros à esquerda)

PROBLEMA: Erro 400 - "CNPJ inválido"
SOLUÇÃO: Verificar se o CNPJ tem 14 dígitos e é válido segundo algoritmo

PROBLEMA: Erro 429 - Rate limit excedido
SOLUÇÃO: Aguardar 15 minutos ou implementar retry com backoff

PROBLEMA: Erro 404 - Recurso não encontrado
SOLUÇÃO: Verificar se o ID/código existe na base de dados

PROBLEMA: Erro 500 - Erro interno
SOLUÇÃO: Verificar logs da aplicação ou contatar suporte

DICAS DE PERFORMANCE:
- Use paginação para grandes consultas (limit/offset)
- Aplique filtros específicos para reduzir resultado
- Use cache local quando apropriado
- Monitore rate limits

VALIDAÇÃO DE DADOS:
- Sempre validar dados no frontend antes de enviar
- CNPJs devem ser validados no cliente também
- Datas devem estar no formato correto
- Campos obrigatórios devem ser verificados

================================================================================
CONTATO E SUPORTE
================================================================================

Repositório: https://github.com/alertseapt/agenda-mercocamp-att
Health Check: GET /health
Logs: Disponíveis no painel Railway
Documentação Online: GET /

Versão da Documentação: 3.1.0
Atualizada em: Janeiro 2024

================================================================================
FIM DA DOCUMENTAÇÃO
================================================================================ 